#!/bin/sh
# TazLito - SliTaz Live Tool.
#
# Tazlito is a tool to help generating and configuring SliTaz LiveCD
# ISO images. You can creat a custom distro in one command from a list of
# packages, extract a existing ISO image to hack it, creat new initramfs
# and/or new ISO. Most commands must be run by root, expect the stats
# and the configuration file manipulation.
#
# (C) 2007 SliTaz - GNU General Public License.
# Initial author : <pankso@slitaz.org>
#
VERSION=1.2

# Tazlito configuration variables to be shorter
# and to use words rater than numbers.
COMMAND=$1
LIST_NAME=$2
TMP_DIR=/tmp/tazlito-$$-$RANDOM
TOP_DIR=`pwd`
INITRAMFS=rootfs.gz
LZMA_INITRAMFS=rootfs.lz

# Try to include config file, continue if command is gen-config or exit.
# The main config used by default is in /etc/tazlito.
if [ -f "/etc/tazlito/tazlito.conf" ] ; then
	CONFIG_FILE="/etc/tazlito/tazlito.conf"
fi
# Specific distro config file can be put in a distro tree.
if [ -f "$TOP_DIR/tazlito.conf" ] ; then
	CONFIG_FILE="$TOP_DIR/tazlito.conf"
fi
if [ ! "$CONFIG_FILE" = "" ] ; then
	. $CONFIG_FILE
else
	if [ "$COMMAND" = "gen-config" ] ; then
		continue
	else
		echo "Unable to find any configuration file. Please read the doc"
		echo "or run '`basename $0` gen-config' to get an empty config file."
		exit 0
	fi
fi

# Set the rootfs and rootcd path with $DISTRO
# configuration variable.
ROOTFS=$DISTRO/rootfs
ROOTCD=$DISTRO/rootcd

#####################
# Tazlito functions #
#####################

# Print the usage.
usage ()
{
	echo -e "\nSliTaz Live Tool - Version: $VERSION\n
\033[1mUsage: \033[0m `basename $0` [command] [list|iso] [dir]
\033[1mCommands: \033[0m\n
  usage           Print this short usage.
  stats           View Tazlito and distro configuration statistics.
  gen-config      Generate a new configuration file for a distro.
  configure       Configure the main config file or a specific tazlito.conf.
  gen-iso         Generate a new ISO from a distro tree.
  gen-initiso     Generate a new initramfs and ISO from the distro tree.
  extract-distro  Extract and ISO to a directory and rebuild LiveCD tree.
  gen-distro      Generated a Live distro and ISO from a list of packages.
  clean-distro    Remove all files generated by gen-distro.
  addhacker       Add Linux User Hacker to the current distro.
  check-distro    Help to check if distro is ready to release.
  burn-iso        Burn ISO image to a cdrom using Wodim.\n"
}

# Status function.
status()
{
	local CHECK=$?
	echo -en "\\033[70G[ "
	if [ $CHECK = 0 ]; then
		echo -en "\\033[1;33mOK"
	else
		echo -en "\\033[1;31mFailed"
	fi
	echo -e "\\033[0;39m ]"
}
todomsg()
{
	echo -e "\\033[70G[ \\033[1;31mTODO\\033[0;39m ]"
}

# Check if user is root.
check_root()
{
	if test $(id -u) != 0 ; then
	   echo -e "\nYou must be root to run `basename $0` with this option."
	   echo -e "Please type 'su' and root password to become super-user.\n"
	   exit 0
	fi
}

# Check for the boot dir into the root CD tree.
verify_rootcd()
{
	if [ ! -d "$ROOTCD/boot" ] ; then
		echo -e "\nUnable to find the rootcd boot directory...\n"
		exit 0
	fi
}

# Gen a new ISO image using isolinux.
gen_livecd_isolinux()
{
	if [ ! -f "$ROOTCD/boot/isolinux/isolinux.bin" ] ; then
		echo -e "\nUnable to find isolinux binary.\n"
		exit 0
	fi
	cd $DISTRO
	echo ""
	echo -e "\033[1mGenerating ISO image\033[0m"
	echo "================================================================================"
	genisoimage -R -o $ISO_NAME.iso -b boot/isolinux/isolinux.bin \
		-c boot/isolinux/boot.cat -no-emul-boot -boot-load-size 4 \
		-V "$VOLUM_NAME" -p "$PREPARED" -input-charset iso8859-1 \
		-boot-info-table $ROOTCD
	echo "================================================================================"
}

# Gen a new initramfs from the root file system.
gen_initramfs()
{
	cd $ROOTFS
	echo ""
	# Use lzma if installed
	if [ -x /usr/bin/lzma ]; then
		echo -n "Generating cpio archive... "
		find . -print | cpio -o -H newc > ../rootfs.cpio
		cd $DISTRO
		lzma e $ROOTFS.cpio $LZMA_INITRAMFS
		rm rootfs.cpio
		cp $LZMA_INITRAMFS $ROOTCD/boot
		# Remove eventual gziped initramfs and sed isolinux.cfg for the path
		# to lzma rootfs ($LZMA_INITRAMFS)
		rm -f $ROOTCD/boot/$INITRAMFS
		sed -i s/$INITRAMFS/$LZMA_INITRAMFS/g $ROOTCD/boot/isolinux/isolinux.cfg
	else
		echo -n "Generating gziped initramfs... "
		find . -print | cpio -o -H newc | gzip -9 > $DISTRO/$INITRAMFS
		cd $DISTRO
		cp $INITRAMFS $ROOTCD/boot
	fi
}

# Print ISO and rootfs size.
distro_stats()
{
	echo ""
	echo -e "\033[1mDistro statistics\033[0m"
	echo "================================================================================"
	echo "Build date      : `date +%Y%m%d\ \at\ \%H:%M:%S`"
	echo "Packages        : `ls -1 $ROOTFS/var/lib/tazpkg/installed | wc -l`"
	echo "Rootfs size     : `du -sh $ROOTFS`"
	if [ -f $LZMA_INITRAMFS ]; then
		echo "Initramfs size  : `du -sh $LZMA_INITRAMFS`"
	else
		echo "Initramfs size  : `du -sh $INITRAMFS`"
	fi
	echo "ISO image size  : `du -sh $ISO_NAME.iso`"
	echo "================================================================================"
	echo ""
}

# Creat an empty configuration file.
empty_config_file()
{
	cat >> tazlito.conf << "EOF"
# tazlito.conf: Tazlito (SliTaz Live Tool)
# configuration file.
#

# Name of the ISO image to generate.
ISO_NAME=""

# ISO image volum name.
VOLUM_NAME="SliTaz"

# Name of the preparator.
PREPARED="$USER"

# Path to the packages repository and the packages.list.
PACKAGES_REPOSITORY=""

# Path to the distro tree to gen-distro from a
# list of packages.
DISTRO=""

# Path to the directory contening additional files
# to copy into the rootfs and rootcd of the LiveCD.
ADDFILES="$DISTRO/addfiles"
EOF
}

####################
# Tazlito commands #
####################

case "$COMMAND" in
	stats)
		# Tazlito general statistics from the config file.
		#
		echo ""
		echo -e "\033[1mTazlito statistics\033[0m
===============================================================================
Config file         : $CONFIG_FILE
ISO name            : $ISO_NAME.iso
Volum name          : $VOLUM_NAME
Prepared            : $PREPARED
Packages repository : $PACKAGES_REPOSITORY
Distro directory    : $DISTRO"
		if [ ! "$ADDFILES" = "" ] ; then
			echo -e "Additional files    : $ADDFILES"
		fi
		echo "================================================================================"
		echo ""
	    ;;
	gen-config)
		# Gen a new config file in the current dir or the specified
		# directory by $2.
		#
		if [ -n "$2" ] ; then
			mkdir -p $2 && cd $2
		fi
		echo -n "Generating empty tazlito.conf..."
		empty_config_file
		status
		echo ""
		if [ -f "tazlito.conf" ] ; then
			echo "Configuration file is ready to edit."
			echo "File location : `pwd`/tazlito.conf"
			echo ""
		fi
		;;
	configure)
		# Configure a tazlito.conf config file. Start by getting
		# a empty config file and sed it.
		#
		if [ -f "tazlito.conf" ] ; then
			continue
			rm tazlito.conf
		else
			if test $(id -u) = 0 ; then
				cd /etc
			else
				echo "You must be root to configure the main config file or in"
				echo "the same directory of the file you want to configure."
				exit 0
			fi
		fi
		empty_config_file
		echo""
		echo -e "\033[1mConfiguring :\033[0m `pwd`/tazlito.conf"
		echo "================================================================================"
		# ISO name.
		echo -n "ISO name            : " ; read anser
		sed -i s#'ISO_NAME=\"\"'#"ISO_NAME=\"$anser\""# tazlito.conf
		# Volum name.
		echo -n "Volum name          : " ; read anser
		sed -i s/'VOLUM_NAME=\"SliTaz\"'/"VOLUM_NAME=\"$anser\""/ tazlito.conf
		# Packages repository.
		echo -n "Packages repository : " ; read anser
		sed -i s#'PACKAGES_REPOSITORY=\"\"'#"PACKAGES_REPOSITORY=\"$anser\""# tazlito.conf
		# Distro path.
		echo -n "Distro path         : " ; read anser
		sed -i s#'DISTRO=\"\"'#"DISTRO=\"$anser\""# tazlito.conf
		echo "================================================================================"
		echo "Config file is ready to use."
		echo "You can now extract an ISO or generate a distro."
		echo ""
		;;
	gen-iso)
		# Simply generated a new iso.
		#
		check_root
		verify_rootcd
		gen_livecd_isolinux
		distro_stats
		;;
	gen-initiso)
		# Simply generated a new initramfs with a new iso.
		#
		check_root
		verify_rootcd
		gen_initramfs
		gen_livecd_isolinux
		distro_stats
		;;
	extract-distro)
		# Extract a ISO image to a directory and rebuild the LiveCD tree.
		#
		check_root
		ISO_IMAGE=$2
		if [ -z "$ISO_IMAGE" ] ; then
			echo -e "\nPlease specify the path to the ISO image."
			echo -e "Example : `basename $0` image.iso /path/target\n"
			exit 0
		fi
		# Set the distro path by checking for $3 on cmdline.
		if [ -n "$3" ] ; then
			TARGET=$3
		else
			TARGET=$DISTRO
		fi
		# Exit if existing distro is found.
		if [ -d "$TARGET/rootfs" ] ; then
			echo -e "\nA rootfs exist in : $TARGET"
			echo -e "Please clean the distro tree or change directory path.\n"
			exit 0
		fi
		echo ""
		echo -e "\033[1mTazlito extracting :\033[0m $ISO_IMAGE"
		echo "================================================================================"
		# Start to mount the ISO.
		echo ""
		echo "Mounting ISO image..."
		mkdir -p $TMP_DIR
		# Get ISO file size.
		isosize=`du -sh $ISO_IMAGE`
		mount -o loop $ISO_IMAGE $TMP_DIR
		sleep 2
		# Prepare target dir, copy the kernel and the rootfs.
		mkdir -p $TARGET/rootfs
		mkdir -p $TARGET/rootcd/boot
		echo -n "Copying the Linux kernel..."
		cp $TMP_DIR/boot/bzImage $TARGET/rootcd/boot
		status
		echo -n "Copying isolinux files..."
		cp -a $TMP_DIR/boot/isolinux $TARGET/rootcd/boot
		status
		echo -n "Copying the rootfs..."
		cp $TMP_DIR/boot/rootfs.gz $TARGET/rootcd/boot
		cp $TMP_DIR/boot/rootfs.gz $TARGET/rootfs
		status
		# Exract initramfs.
		cd $TARGET/rootfs
		echo -n "Extracting the rootfs... "
		gzip -d rootfs.gz && cpio -id < rootfs
		rm rootfs
		# Umount and remove temp directory and cd to $TARGET to get stats.
		umount $TMP_DIR && rm -rf $TMP_DIR
		cd ..
		echo ""
		echo "================================================================================"
		echo "Extracted       : $ISO_IMAGE ($isosize)"
		echo "Distro tree     : `pwd`"
		echo "Rootfs size     : `du -sh rootfs`"
		echo "Rootcd size     : `du -sh rootcd`"
		echo "================================================================================"
		echo ""
		;;
	gen-distro)
		# Generate a live distro tree with a set of packages.
		#
		check_root
		if [ -d $ROOTFS ] ; then
			echo "A rootfs exist in : $DISTRO"
			echo -e "Please clean the distro tree or change directory path.\n"
			exit 0
		fi
		# First check for the main packages list then
		# for a distro-packages.list in the current directory
		# if none, check if a package list was specified on cmdline.
		if [ -f "/etc/slitaz-tools/distro-packages.list" ] ; then
			LIST_NAME="distro-packages.list"
		fi
		if [ -f "distro-packages.list" ] ; then
			LIST_NAME="distro-packages.list"
		fi
		if [ -n "$2" ] ; then
			if [ ! -f "$2" ] ; then
				echo -e "\nUnable to find the specified packages list."
				echo -e "List name : $2\n"
				exit 0
			else
				LIST_NAME=$2
			fi
		fi
		# Exit if no list name.
		if [ "$LIST_NAME" = "" ] ; then
			echo -e "\nNo packages list found or specified. Please read the doc.\n"
			exit 0
		fi
		# Start generation.
		echo ""
		echo -e "\033[1mTazlito generating a distro\033[0m"
		echo "================================================================================"
		# Get the list of packages using cat for a file list.
		LIST=`cat $LIST_NAME`
		# Verify if all packages in list are presents in $PACKAGES_REPOSITORY.
		for pkg in $LIST
		do
			pkg=${pkg%.tazpkg}
			if [ ! -f $PACKAGES_REPOSITORY/$pkg.tazpkg ] ; then
				echo -e "\nUnable to find $pkg in the repository."
				echo -e "Path : $PACKAGES_REPOSITORY\n"
				exit 0
			fi
		done
		# Root fs stuff.
		echo "Preparing the rootfs directory..."
		mkdir -p $ROOTFS
		sleep 2
		for pkg in $LIST
		do
			# First copy and extract the package in tmp dir.
			pkg=${pkg%.tazpkg}
			mkdir -p $TMP_DIR
			cp $PACKAGES_REPOSITORY/$pkg.tazpkg $TMP_DIR && cd $TMP_DIR
			echo ""
			echo -n "Installing $PACKAGE... "
			cpio -id < $pkg.tazpkg && rm -f $pkg.tazpkg
			gzip -d fs.cpio.gz
			echo -n "Extracting the file system... "
			cpio -id < fs.cpio && rm fs.cpio
			# Copy all packages fs and receipt to the rootfs.
			echo -n "Copying files to the rootfs..."
			cp -a fs/* $ROOTFS
			. $PWD/receipt
			mkdir -p $ROOTFS/var/lib/tazpkg/installed/$PACKAGE
			# Copy the receipt, list of files and description if exist.
			cp receipt $ROOTFS/var/lib/tazpkg/installed/$PACKAGE
			cp files.list $ROOTFS/var/lib/tazpkg/installed/$PACKAGE
			if [ -f "description.txt" ] ; then
				cp description.txt $ROOTFS/var/lib/tazpkg/installed/$PACKAGE
			fi
			status
			# Remove tmp dir to get a empty one for the next package.
			rm -rf $TMP_DIR
		done
		echo ""
		cd $DISTRO
		# Copy all files from $ADDFILES/rootfs to the rootfs.
		if [ -d "$ADDFILES/rootfs" ] ; then
			echo -n "Copying addfiles content to the rootfs... "
			cp -a $ADDFILES/rootfs/* $ROOTFS && status
		fi
		echo "Root file system is generated..."
		# Root CD part.
		echo -n "Preparing the rootcd directory..."
		mkdir -p $ROOTCD
		status
		# Move the boot dir with the Linux kernel from rootfs.
		# The boot dir goes directly on the CD.
		if [ -d "$ROOTFS/boot" ] ; then
			echo -n "Moving the boot directory..."
			mv $ROOTFS/boot $ROOTCD
			cd $ROOTCD/boot
			mv vmlinuz-* bzImage
			status
		fi
		cd $DISTRO
		# Copy all files from $ADDFILES/rootcd to the rootcd.
		if [ -d "$ADDFILES/rootcd" ] ; then
			echo -n "Copying addfiles content to the rootcd... "
			cp -a $ADDFILES/rootcd/* $ROOTCD && status
		fi
		# Initramfs and ISO image stuff.
		gen_initramfs
		gen_livecd_isolinux
		distro_stats
		;;
	clean-distro)
		# Remove old distro tree.
		#
		check_root
		echo ""
		echo -e "\033[1mCleaning :\033[0m $DISTRO"
		echo "================================================================================"
		if [ -d "$DISTRO" ] ; then
			if [ -d "$ROOTFS" ] ; then
				echo -n "Removing the rootfs..."
				rm -f $DISTRO/$INITRAMFS
				rm -f $DISTRO/$LZMA_INITRAMFS
				rm -rf $ROOTFS && status
			fi
			if [ -d "$ROOTCD" ] ; then
				echo -n "Removing the rootcd..."
				rm -rf $ROOTCD && status
			fi
			echo -n "Removing eventual ISO image..."
			rm -f $DISTRO/$ISO_NAME.iso && status
		fi
		echo "================================================================================"
		echo ""
		;;
	addhacker)
		# Without /etc/passwd...
		#
		check_root
		echo ""
		echo -e "\033[1mAdduser hacker to :\033[0m $ROOTFS"
		echo "================================================================================"
		if [ ! -d "$ROOTFS/etc" ] ; then
			echo -e "\nUnable to find : $ROOTFS/etc"
			echo -e "Users and passwords config files will not be found.\n"
			exit 0
		fi
		# Go for echoing on configuration files if any hacker was found.
		#
		if [ ! "`cat $ROOTFS/etc/passwd | grep hacker`" ] ; then
			echo -n "Configuring $ROOTFS/etc..."
			echo 'hacker:x:500:500:Linux User,,,:/home/hacker:/bin/ash' >> $ROOTFS/etc/passwd
			echo 'hacker::13646:0:99999:7:::' >> $ROOTFS/etc/shadow
			echo 'hacker:x:500:' >> $ROOTFS/etc/group
			echo 'hacker:!::' >> $ROOTFS/etc/gshadow
			status
		else
			echo "Hacker is already in : $ROOTFS/etc/passwd"
		fi
		# Hacker can listen to music
		#
		if grep -q audio $ROOTFS/etc/group; then
			sed -i s/'audio:x:20:'/'audio:x:20:hacker'/ $ROOTFS/etc/group
		fi
		# /home/hacker files.
		#
		echo -n "Creating default directories... "
		mkdir -p $ROOTFS/home/hacker/Documents \
		$ROOTFS/home/hacker/Downloads \
		$ROOTFS/home/hacker/Images \
		$ROOTFS/home/hacker/Public \
		$ROOTFS/home/hacker/Templates
		status
		# Change permissions.
		#
		echo -n "Chmodig all files in /home/hacker..."
		chown -R 500.500 $ROOTFS/home/hacker
		status
		echo "================================================================================"
		echo "Linux User Hacker have an account in the distro."
		echo ""
		;;
	check-distro)
		# Check for a few LiveCD needed files not installed by packages.
		#
		if [ ! -d "$ROOTFS" ] ; then
			echo -e "\nUnable to find a distro rootfs to check.\n"
			exit 0
		fi
		echo ""
		echo -e "\033[1mChecking distro :\033[0m $ROOTFS"
		echo "================================================================================"
		# SliTaz release info.
		if [ ! -f "$ROOTFS/etc/slitaz-release" ]; then
			echo "Missing release info : /var/lib/tazpkg/mirror"
		else
			release=`cat $ROOTFS/etc/slitaz-release`
			echo -n "Release      : $release"
			status
		fi
		# Tazpkg mirror.
		if [ ! -f "$ROOTFS/var/lib/tazpkg/mirror" ]; then
			echo -n "Mirror URL   : Missing /var/lib/tazpkg/mirror"
			todomsg
		else
			echo -n "Mirror configuration exist..."
			status
		fi
		# Isolinux msg	
		if grep -q "cooking-XXXXXXXX" /$ROOTCD/boot/isolinux/isolinux.msg; then
			echo -n "Isolinux msg : Missing cooking date XXXXXXXX (ex `date +%Y%m%d`)"
			todomsg
		else
			echo -n "Isolinux message seems good..."
			status
		fi
		echo "================================================================================"
		echo ""
		;;
	burn-iso)
		# Guess cdrom device, ask user and burn the ISO.
		#
		check_root
		DRIVE_NAME=`cat /proc/sys/dev/cdrom/info | grep "drive name" | cut -f 3`
		DRIVE_SPEED=`cat /proc/sys/dev/cdrom/info | grep "drive speed" | cut -f 3`
		# We can specify an alternative ISO from the cmdline.
		if [ -n "$2" ] ; then
			iso=$2
		else
			iso=$DISTRO/$ISO_NAME.iso
		fi
		if [ ! -f "$iso" ]; then
			echo -e "\nUnable to find ISO : $iso\n"
			exit 0
		fi
		echo ""
		echo -e "\033[1mTazlito burn ISO\033[0m "
		echo "================================================================================"
		echo "Cdrom device  : /dev/$DRIVE_NAME"
		echo "Drive speed   : $DRIVE_SPEED"
		echo "ISO image     : $iso"
		echo "================================================================================"
		echo ""
		echo -n "Burn ISO image (y/N) ? "; read anser
		if [ "$anser" == "y" ]; then
			echo ""
			echo "Starting Wodim to burn the iso..." && sleep 2
			echo "================================================================================"
			wodim speed=$DRIVE_SPEED dev=/dev/$DRIVE_NAME $DISTRO/$ISO_NAME.iso
			echo "================================================================================"
			echo "ISO image is burned to cdrom."
		else
			echo -e "\nExiting. No ISO burned."
		fi
		echo ""
		;;
	usage|*)
		# Clear and print usage also for all unknow commands.
		#
		clear
		usage
		;;

esac

exit 0
